import asyncHandler from 'express-async-handler';
import { getAllUsers, getUserById, getUserByEmail, createUser, updateUserById, deleteUserById } from '../../database/queries/auth/userquery.js';
import { getToken, createToken, deleteToken } from '../../database/queries/auth/tokenquery.js';
import crypto from 'crypto';
import bcrypt from 'bcryptjs';
import { sendEmail } from '../../utils/sendEmail.js';


// Fonction pour formater la date d'expiration du token en UTC
const formatTokenExpiration = (duration, unit) => {
  const unitsToMs = {
    'h': 3600000,
    'm': 60000,
    's': 1000
  };
  const durationInMs = duration * (unitsToMs[unit] || 0);
  const expiresAt = new Date(Date.now() + durationInMs);
  return expiresAt.toISOString();
};

// Fonction pour v√©rifier si le token a expir√©
const hasTokenExpired = (expiresAtSql) => {

  const expiresAt = new Date(expiresAtSql + 'Z'); // Ajout de 'Z' pour clarifier que c'est en UTC.
  // L'heure actuelle en UTC.
  const nowUtc = new Date();
  return nowUtc > expiresAt; // Si maintenant est plus grand que l'expiration, le token a expir√©.
};



// Register user
export const userRegister = asyncHandler(async (req, res) => {
  // Extraction des donn√©es envoy√©es par l'utilisateur
  const { name, email, role } = req.body;

  // Validation des donn√©es re√ßues
  if (!name || !email || !role) {
    // Si une des donn√©es est manquante, envoie une r√©ponse d'erreur
    return res.status(400).json({ message: "Veuillez saisir tous les champs" });
  }
  console.log(name, email, role);

  // V√©rification si l'adresse email est d√©j√† utilis√©e
  const userExists = await getUserByEmail(email);
  if (userExists) {
    // Si l'adresse email existe d√©j√†, envoie une r√©ponse d'erreur
    return res.status(400).json({ message: "Adresse email d√©j√† utilis√©e" });
  }


  // Formatage de l'adresse email en minuscules
  const formatedEmail = email.toLowerCase();

  

  // Cr√©ation d'un nouvel utilisateur dans la base de donn√©es
  const result = await createUser(name, formatedEmail, role);

  // Si l'utilisateur est cr√©√© avec succ√®s, proc√©der avec la cr√©ation du token de r√©initialisation
  if (result.insertId) {
    const userId = result.insertId;

    // Suppression de l'ancien token s'il existe
    const oldToken = await getToken(userId);
    if (oldToken) {
      await deleteToken(oldToken.id);
    }

    // Cr√©ation du token de r√©initialisation
    let resetToken = crypto.randomBytes(32).toString('hex') + userId;

    // Hachage du token avant de l'enregistrer dans la base de donn√©es
    const hashedToken = crypto.createHash("sha256").update(resetToken).digest("hex");

    // Cr√©ation de la date d'expiration du token
    const expiresAt = new Date(Date.now() + 1440 * 60 * 1000);
    const expiresAtSql = expiresAt.toISOString().slice(0, 19).replace('T', ' ');
    const createdAt = new Date().toISOString().slice(0, 19).replace('T', ' ');
    // Enregistrement du token hach√© dans la base de donn√©es
    await createToken(userId, hashedToken, createdAt, expiresAtSql);

    // Construction de l'URL de r√©initialisation du mot de passe
    const resetUrl = `${process.env.FRONTEND_URL}/resetpassword/${resetToken}`;

    // Pr√©paration du message d'email de r√©initialisation
    const message = `
      <h2>Salut ${name}</h2>
      <p>Votre administrateur Garage automobile vient de vous cr√©er un compte utilisateur afin que vous acc√©diez √† la plateforme.</p>
      <p>Cliquez sur le lien suivant pour enregistrer votre mot de passe et acc√©der √† l'application :</p>
      <p>Ce lien est valide pour seulement 24 heures.</p>
      <a href=${resetUrl} clicktracking=off>${resetUrl}</a>
      <p>Bienvenue üòâ ...</p>
      <h3>√âquipe Garage Auto</h3>
    `;

    // Configuration de l'email √† envoyer
    const subject = 'üõÇ Activation de votre compte - Garage Auto';
    const send_to = email;
    const sent_from = process.env.EMAIL_USER;

    // Envoi de l'email
    try {
      await sendEmail(subject, message, send_to, sent_from);
      // Envoie d'une r√©ponse de succ√®s si l'email est envoy√©
      return res.status(201).json({ message: 'Utilisateur cr√©√© avec succ√®s et email envoy√©' });
    } catch (error) {
      // En cas d'erreur d'envoi de l'email, envoie une r√©ponse d'erreur
      console.error(error.message);
      return res.status(500).json({ success: false, message: 'Erreur lors de l\'envoi de l\'email, veuillez r√©essayer' });
    }
  } else {
    // Envoie d'une r√©ponse d'erreur si la cr√©ation de l'utilisateur √©choue
    return res.status(400).json({ message: "Erreur lors de la cr√©ation de l'utilisateur" });
  }
});


// Get all users
export const getUsers = asyncHandler(async (req, res) => {
  try {
    // R√©cup√©rer tous les utilisateur depuis la base de donn√©es
    const users = await getAllUsers();

    // V√©rifier s'il y a des users
    if (!users || users.length === 0) {
      return res.status(404).json({ message: 'Aucun utilisateur trouv√©.' });
    }
    // Renvoyer les users au format JSON
    return res.status(200).json(users);
  } catch (error) {
    return res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des utilisateurs.' });
  }
});

// Get One User By Id
export const getUser = asyncHandler(async (req, res) => {
  try {
    // R√©cup√©rer l'identifiant du user depuis les param√®tres de la requ√™te
    const { id } = req.params;

    // R√©cup√©rer le user dans la base de donn√©es
    const user = await getUserById(id);
    console.log(user);
    if (user) {
      return res.status(200).json({
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
      })
    } else {
      return res.status(404).json({ message: 'Utilisateur non trouv√©.' });
    }
  } catch (error) {
    return res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration de l\'utilisateur.' });
  }
});



//Update user
export const updateUser = asyncHandler(async (req, res) => {
  const { id } = req.params; // R√©cup√©ration de l'ID de l'utilisateur depuis les param√®tres de la requ√™te
  const { name, email, role } = req.body; // R√©cup√©ration des nouvelles valeurs depuis le corps de la requ√™te

  // R√©cup√©ration de l'utilisateur actuel pour s'assurer qu'il existe
  const user = await getUserById(id);
  
  if (user) {
    // Mise √† jour de l'utilisateur avec les nouvelles valeurs ou les anciennes si aucune nouvelle n'est fournie
    const result = await updateUserById(
      id,
      name || user.name,
      email || user.email,
      role || user.role
    );

    // Si la mise √† jour est r√©ussie, envoie une r√©ponse avec le r√©sultat
    return res.status(200).json({
      message: 'Utilisateur modifi√© avec succ√®s',
      user: {
        id: id,
        name: name || user.name,
        email: email || user.email,
        role: role || user.role
      }
    });
  } else {
    // Si aucun utilisateur n'est trouv√© avec l'ID fourni, envoie une r√©ponse d'erreur
    return res.status(404).json({ message: 'Utilisateur non trouv√©' });
  }
});


// Delete an existing user by ID
export const deleteUser = asyncHandler(async (req, res) => {
  
  // R√©cup√©rer l'identifiant du user depuis les param√®tres de la requ√™te
  const { id } = req.params;
  try {
    // V√©rifier si l'utilisateur existe dans la base de donn√©es
    const existingUser = await getUserById(id);
    
    // Si l'utilisateur n'existe pas, renvoyer une r√©ponse 404
    if (!existingUser) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©.' });
    }
    
    // Supprimer l'utilisateur de la base de donn√©es
    const result = await deleteUserById(id);
    console.log(result);
    return res.status(200).json({ message: 'Utilisateur supprim√© avec succ√®ss' });

  } catch (error) {
    console.error(error); 
    return res.status(500).json({ message: 'Erreur lors de la suppression de l\'utilisateur.' });
  }
});

