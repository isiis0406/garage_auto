import asyncHandler from 'express-async-handler';
import { getTestimonial, createTestimonial, updateTestimonial, deleteTestimonial, getTestimonials, approveTestimonial } from '../../database/queries/testimonials/testimonialquery.js';

// R√©cup√©rer tous les t√©moignages pour le public
export const getAllTestimonials = asyncHandler(async (req, res) => {
    try {
        const testimonials = await getTestimonials();
        if (testimonials) {
            return res.status(200).json(testimonials);
        }
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des t√©moignages", error: error.message });
    }
});


// R√©cup√©rer un t√©moignage par son ID
export const getOneTestimonial = asyncHandler(async (req, res) => {
    const { id } = req.params;
    try {
        const testimonial = await getTestimonial(id);
        if (!testimonial) {
            return res.status(404).json({ message: "T√©moignage non trouv√©" });
        }
        res.status(200).json(testimonial);
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration du t√©moignage", error: error.message });
    }
});

// Cr√©er un nouveau t√©moignage
export const createOneTestimonial = asyncHandler(async (req, res) => {
    const { name, email, content, rating } = req.body;
    try {
        // valider les donn√©es
        if (!name, !email || !content || !rating) {
            return res.status(400).json({ message: "Tous les champs sont requis" });
        }
        // Le rating doit √™tre un nombre entre 1 et 5
        if (rating < 1 || rating > 5) {
            return res.status(400).json({ message: "Le rating doit √™tre un nombre entre 1 et 5" });
        }
        // Cr√©er le t√©moignage dans la base de donn√©es
        const newTestimonial = await createTestimonial({ name, email, content, rating });
        res.status(201).json({ message: "Votre t√©moignage a √©t√© enregistr√©, il sera approuv√© et publier dans les 24 heures qui suiventüòâ.", testimonial: newTestimonial });
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la cr√©ation du t√©moignage", error: error.message });
    }
});

// Mettre √† jour un t√©moignage
export const updateOneTestimonial = asyncHandler(async (req, res) => {
    const { id } = req.params;
    const { name, email, content, rating } = req.body;
    try {
        // V√©rifiez d'abord si le t√©moignage existe
        const testimonialExists = await getTestimonial(id);

        if (!testimonialExists) {
            return res.status(404).json({ message: "T√©moignage non trouv√©" });
        }
        // valider les donn√©es
        if (!name, !email || !content || !rating) {
            return res.status(400).json({ message: "Tous les champs sont requis" });
        }
        // Le rating doit √™tre un nombre entre 1 et 5
        if (rating < 1 || rating > 5) {
            return res.status(400).json({ message: "Le rating doit √™tre un nombre entre 1 et 5" });
        }
        // Mettre √† jour le t√©moignage dans la base de donn√©es
        const updatedTestimonial = await updateTestimonial(id,
            {
                name: name || testimonialExists.name,
                email: email || testimonialExists.email,
                content: content || testimonialExists.content,
                rating: rating || testimonialExists.rating
            });
        res.status(200).json({ message: "T√©moignage mis √† jour avec succ√®s", testimonial: updatedTestimonial });
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la mise √† jour du t√©moignage", error: error.message });
    }
});

// Approuver un t√©moignage
export const approveOneTestimonial = asyncHandler(async (req, res) => {
    const { id } = req.params;
    try {
        // V√©rifiez d'abord si le t√©moignage existe
        const testimonialExists = await getTestimonial(id);
        if (!testimonialExists) {
            return res.status(404).json({ message: "T√©moignage non trouv√©" });
        }
        // Approuver le t√©moignage dans la base de donn√©es
        const approvedTestimonial = await approveTestimonial(id, { status: "approuv√©" });
        res.status(200).json({ message: "T√©moignage approuv√© avec succ√®s", testimonial: approvedTestimonial });
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de l'approbation du t√©moignage", error: error.message });
    }
});

// Supprimer un t√©moignage
export const deleteOneTestimonial = asyncHandler(async (req, res) => {
    const { id } = req.params;
    try {
        // V√©rifiez d'abord si le t√©moignage existe
        const testimonialExists = await getTestimonial(id);
        if (!testimonialExists) {
            return res.status(404).json({ message: "T√©moignage non trouv√©" });
        }
        // Supprimer le t√©moignage de la base de donn√©es
        await deleteTestimonial(id);
        res.status(200).json({ message: "T√©moignage supprim√© avec succ√®s" });
    } catch (error) {
        res.status(500).json({ message: "Erreur lors de la suppression du t√©moignage", error: error.message });
    }
});
